{"version":3,"file":"main.1ac378b4a5e159924553.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;;AAbA;AAgBA;AAAA;AAAA;AAAA;AAGA;AACA;;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AAEA;AACA;AACA;AAHA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AA1BA;AACA;;;AADA;AA4BA;AAAA;;AACA;AACA;;AAFA","sources":["webpack://fail-end/./src/hooks/authSlice.js","webpack://fail-end/./src/hooks/useAuth.js"],"sourcesContent":["\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  password: null,\n  userName: null,\n};\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n\n  reducers: {\n    setPassword: (state,action) => {\n      state.password = action.payload;\n    },\n    setUser: (state,action) => {\n      state.user = action.payload\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n});\n\nexport const { setPassword, setUser } = authSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = (state) => state.auth.password;\nexport const userName = (state) => state.auth.user;\n\n\nexport default authSlice.reducer;\n","import { createContext, useContext, useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useLocalStorage } from \"./useLocalStorage\";\nimport { setPassword,deletPa } from \"./authSlice\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useLocalStorage(\"user\", null);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const login = async (data) => {\n    setUser(data);\n    dispatch(setPassword(data))\n    navigate(\"/Home\", { replace: true });\n  };\n\n  const logout = () => {\n    setUser(null);\n    navigate(\"/\", { replace: true });\n  };\n\n  const value = useMemo(\n    () => ({\n      user,\n      login,\n      logout\n    }),\n    [user]\n  );\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"names":[],"sourceRoot":""}